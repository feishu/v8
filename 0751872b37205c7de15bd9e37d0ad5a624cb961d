{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "496e1d4b_c080b635",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1218025
      },
      "writtenOn": "2024-10-16T20:25:50Z",
      "side": 1,
      "message": "PTAL",
      "revId": "0751872b37205c7de15bd9e37d0ad5a624cb961d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c0cb3cf_3050ff1d",
        "filename": "src/heap/base/bytes.h",
        "patchSetId": 7
      },
      "lineNbr": 70,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-10-23T15:22:53Z",
      "side": 1,
      "message": "nit: const",
      "range": {
        "startLine": 70,
        "startChar": 4,
        "endLine": 70,
        "endChar": 10
      },
      "revId": "0751872b37205c7de15bd9e37d0ad5a624cb961d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f2419f51_fcbb97be",
        "filename": "src/heap/base/bytes.h",
        "patchSetId": 7
      },
      "lineNbr": 70,
      "author": {
        "id": 1218025
      },
      "writtenOn": "2024-10-30T18:57:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c0cb3cf_3050ff1d",
      "range": {
        "startLine": 70,
        "startChar": 4,
        "endLine": 70,
        "endChar": 10
      },
      "revId": "0751872b37205c7de15bd9e37d0ad5a624cb961d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3dc84e5_70b766a6",
        "filename": "src/heap/gc-tracer.cc",
        "patchSetId": 7
      },
      "lineNbr": 55,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-10-23T15:22:53Z",
      "side": 1,
      "message": "Is the `BoundedAverageSpeed()` still used?",
      "range": {
        "startLine": 55,
        "startChar": 7,
        "endLine": 55,
        "endChar": 26
      },
      "revId": "0751872b37205c7de15bd9e37d0ad5a624cb961d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "23be7473_459f0e74",
        "filename": "src/heap/gc-tracer.cc",
        "patchSetId": 7
      },
      "lineNbr": 55,
      "author": {
        "id": 1218025
      },
      "writtenOn": "2024-10-30T18:57:51Z",
      "side": 1,
      "message": "BoundedAverageSpeed with no `selected_duration` below is still used for GC speed, but no longer used for allocation speed.\nI removed the `selected_duration` arg.",
      "parentUuid": "f3dc84e5_70b766a6",
      "range": {
        "startLine": 55,
        "startChar": 7,
        "endLine": 55,
        "endChar": 26
      },
      "revId": "0751872b37205c7de15bd9e37d0ad5a624cb961d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2295d66_dc4a307c",
        "filename": "src/heap/gc-tracer.cc",
        "patchSetId": 7
      },
      "lineNbr": 1313,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-10-23T15:22:53Z",
      "side": 1,
      "message": "The previous methods used to provide (arbitrary) constants as defaults. I guess we never call them uninitialized these days?",
      "range": {
        "startLine": 1313,
        "startChar": 17,
        "endLine": 1313,
        "endChar": 66
      },
      "revId": "0751872b37205c7de15bd9e37d0ad5a624cb961d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "28dd8bc2_780b54df",
        "filename": "src/heap/gc-tracer.cc",
        "patchSetId": 7
      },
      "lineNbr": 1313,
      "author": {
        "id": 1218025
      },
      "writtenOn": "2024-10-30T18:57:51Z",
      "side": 1,
      "message": "I think BoundedAverageSpeed would also previously return 0 for an empty buffer (which makes sense for allocation throughput).\n\nThis is different for e.g. IncrementalMarkingSpeedInBytesPerMillisecond which returns kConservativeSpeedInBytesPerMillisecond, but this isn\u0027t affected by this CL.\n\nI think we should keep the bounding by kMaxSpeedInBytesPerMs; I brought it back.",
      "parentUuid": "f2295d66_dc4a307c",
      "range": {
        "startLine": 1313,
        "startChar": 17,
        "endLine": 1313,
        "endChar": 66
      },
      "revId": "0751872b37205c7de15bd9e37d0ad5a624cb961d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}