{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "541440db_ed5abdae",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1569532
      },
      "writtenOn": "2024-10-31T19:56:01Z",
      "side": 1,
      "message": "I have applied comments from our meeting with Simon today. I have added some comments in `break-on-exception-..` expected file. Please take a look and let me know what is still missing. Thanks",
      "revId": "3c4ca2000f1b7c10470480d51c03f204fb77c303",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "67dc41d4_5e60b289",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-11-01T17:45:32Z",
      "side": 1,
      "message": "lgtm % the break-on-exception test questions for Simon.",
      "revId": "3c4ca2000f1b7c10470480d51c03f204fb77c303",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "63638713_741ea4c1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1369666
      },
      "writtenOn": "2024-11-04T12:37:02Z",
      "side": 1,
      "message": "Let me know if you need help debugging this.",
      "revId": "3c4ca2000f1b7c10470480d51c03f204fb77c303",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7f8666f_b436dec8",
        "filename": "test/inspector/debugger/break-on-exception-explicit-resource-management-expected.txt",
        "patchSetId": 19
      },
      "lineNbr": 23,
      "author": {
        "id": 1569532
      },
      "writtenOn": "2024-10-31T19:56:01Z",
      "side": 1,
      "message": "That is strange that it gets paused on uncaught exceptions as well. It seems that it shouldn\u0027t.",
      "range": {
        "startLine": 23,
        "startChar": 14,
        "endLine": 23,
        "endChar": 40
      },
      "revId": "3c4ca2000f1b7c10470480d51c03f204fb77c303",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32af66d5_88ce2618",
        "filename": "test/inspector/debugger/break-on-exception-explicit-resource-management-expected.txt",
        "patchSetId": 19
      },
      "lineNbr": 23,
      "author": {
        "id": 1369666
      },
      "writtenOn": "2024-11-04T12:37:02Z",
      "side": 1,
      "message": "What does the handler table for the bytecode look like? The region should not be marked as CAUGHT_BY_JAVASCRIPT, as that is our signal that it is caught. If the problem is specific to await using, perhaps you have added a builtin continuation that we have to treat as non-handling akin to a finally?",
      "parentUuid": "e7f8666f_b436dec8",
      "range": {
        "startLine": 23,
        "startChar": 14,
        "endLine": 23,
        "endChar": 40
      },
      "revId": "3c4ca2000f1b7c10470480d51c03f204fb77c303",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "763ee15c_684efa27",
        "filename": "test/inspector/debugger/break-on-exception-explicit-resource-management-expected.txt",
        "patchSetId": 19
      },
      "lineNbr": 23,
      "author": {
        "id": 1569532
      },
      "writtenOn": "2024-11-05T12:14:08Z",
      "side": 1,
      "message": "Please look at the comment I added in `bytecode-generator.cc` file. I think I fixed the problem related to this part but the test result is still the same.",
      "parentUuid": "32af66d5_88ce2618",
      "range": {
        "startLine": 23,
        "startChar": 14,
        "endLine": 23,
        "endChar": 40
      },
      "revId": "3c4ca2000f1b7c10470480d51c03f204fb77c303",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0fc838c1_401111d3",
        "filename": "test/inspector/debugger/break-on-exception-explicit-resource-management-expected.txt",
        "patchSetId": 19
      },
      "lineNbr": 23,
      "author": {
        "id": 1369666
      },
      "writtenOn": "2024-11-05T12:44:19Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "763ee15c_684efa27",
      "range": {
        "startLine": 23,
        "startChar": 14,
        "endLine": 23,
        "endChar": 40
      },
      "revId": "3c4ca2000f1b7c10470480d51c03f204fb77c303",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b97e920_4f789a57",
        "filename": "test/inspector/debugger/break-on-exception-explicit-resource-management-expected.txt",
        "patchSetId": 19
      },
      "lineNbr": 57,
      "author": {
        "id": 1569532
      },
      "writtenOn": "2024-10-31T19:56:01Z",
      "side": 1,
      "message": "In some cases, there are two `paused on exception` that does not seem right to me. Any ideas what that happens?",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 57,
        "endChar": 20
      },
      "revId": "3c4ca2000f1b7c10470480d51c03f204fb77c303",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "accfea16_147cac7e",
        "filename": "test/inspector/debugger/break-on-exception-explicit-resource-management-expected.txt",
        "patchSetId": 19
      },
      "lineNbr": 57,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2024-11-04T07:11:26Z",
      "side": 1,
      "message": "I think this is because exceptions from all dispose handlers are caught in the generated bytecode and then thrown as a collected error.\n\n@leese@chromium.org: Do you know how this should work? My intuition is that we should pause on each individual error thrown by dispose handlers, but then ignore the re-thrown collected error?",
      "parentUuid": "6b97e920_4f789a57",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 57,
        "endChar": 20
      },
      "revId": "3c4ca2000f1b7c10470480d51c03f204fb77c303",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "976dcfd1_8c0800c6",
        "filename": "test/inspector/debugger/break-on-exception-explicit-resource-management-expected.txt",
        "patchSetId": 19
      },
      "lineNbr": 57,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2024-11-04T09:38:29Z",
      "side": 1,
      "message": "@leese@chromium.org: The bytecode-generator impl is here: https://source.chromium.org/chromium/chromium/src/+/main:v8/src/interpreter/bytecode-generator.cc;l\u003d2800-2801;drc\u003d5de3cdee8a512769ee7c8e91b875a58d28f83452.\n\nMaybe you could take a look and see if the re-throw and catch prediction is done correctly?",
      "parentUuid": "accfea16_147cac7e",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 57,
        "endChar": 20
      },
      "revId": "3c4ca2000f1b7c10470480d51c03f204fb77c303",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92c30e65_06928d81",
        "filename": "test/inspector/debugger/break-on-exception-explicit-resource-management-expected.txt",
        "patchSetId": 19
      },
      "lineNbr": 57,
      "author": {
        "id": 1369666
      },
      "writtenOn": "2024-11-04T12:37:02Z",
      "side": 1,
      "message": "Nothing looks wrong there but I\u0027d need to see the actual bytecode being generated where it is stopping. What\u0027s important is to make sure you use the rethrow bytecode so we know it isn\u0027t a debug event.",
      "parentUuid": "976dcfd1_8c0800c6",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 57,
        "endChar": 20
      },
      "revId": "3c4ca2000f1b7c10470480d51c03f204fb77c303",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad2c50fe_c0106219",
        "filename": "test/inspector/debugger/break-on-exception-explicit-resource-management-expected.txt",
        "patchSetId": 19
      },
      "lineNbr": 57,
      "author": {
        "id": 1569532
      },
      "writtenOn": "2024-11-05T12:14:08Z",
      "side": 1,
      "message": "I don\u0027t understand this comment. Can you please explain a little bit about it?",
      "parentUuid": "92c30e65_06928d81",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 57,
        "endChar": 20
      },
      "revId": "3c4ca2000f1b7c10470480d51c03f204fb77c303",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0795d1a0_d7588f82",
        "filename": "test/inspector/debugger/break-on-exception-explicit-resource-management-expected.txt",
        "patchSetId": 19
      },
      "lineNbr": 57,
      "author": {
        "id": 1369666
      },
      "writtenOn": "2024-11-05T12:44:19Z",
      "side": 1,
      "message": "Just speculating on what might be wrong but it turns out you aren\u0027t using any bytecode to rethrow. See other comment.",
      "parentUuid": "ad2c50fe_c0106219",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 57,
        "endChar": 20
      },
      "revId": "3c4ca2000f1b7c10470480d51c03f204fb77c303",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2559cfd_3d38b6fb",
        "filename": "test/inspector/debugger/break-on-exception-explicit-resource-management-expected.txt",
        "patchSetId": 19
      },
      "lineNbr": 125,
      "author": {
        "id": 1369666
      },
      "writtenOn": "2024-11-04T12:37:02Z",
      "side": 1,
      "message": "So here we see the same exception twice, but the first time it is detected as caught and the second time it is uncaught, so we must be seeing the the disposal code as a try/catch rather than a try/finally and the disposal code must be rethrowing it with a kThrow rather than kRethrow instruction.",
      "range": {
        "startLine": 125,
        "startChar": 0,
        "endLine": 125,
        "endChar": 20
      },
      "revId": "3c4ca2000f1b7c10470480d51c03f204fb77c303",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3259ece7_c86bd87b",
        "filename": "test/inspector/debugger/break-on-exception-explicit-resource-management-expected.txt",
        "patchSetId": 19
      },
      "lineNbr": 125,
      "author": {
        "id": 1569532
      },
      "writtenOn": "2024-11-05T12:14:08Z",
      "side": 1,
      "message": "Based on the expected behavior of this new feature, we have to call disposal methods in a try/finally (https://github.com/tc39/proposal-explicit-resource-management) and not a try/catch, so I believe we cannot change this part. Also about the second part, we have already used throw instead of rethrow in disposal code (https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/js-disposable-stack.cc;l\u003d188;drc\u003da45502c46d75f210c783e07384138379ea1e46e4). Did you mean this part? If not, I may misunderstood which rethrowing you are pointing at.",
      "parentUuid": "e2559cfd_3d38b6fb",
      "range": {
        "startLine": 125,
        "startChar": 0,
        "endLine": 125,
        "endChar": 20
      },
      "revId": "3c4ca2000f1b7c10470480d51c03f204fb77c303",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec90b9bd_48db575b",
        "filename": "test/inspector/debugger/break-on-exception-explicit-resource-management-expected.txt",
        "patchSetId": 19
      },
      "lineNbr": 125,
      "author": {
        "id": 1369666
      },
      "writtenOn": "2024-11-05T12:44:19Z",
      "side": 1,
      "message": "I expect try/finally to work as desired. We should walk past that during catch prediction. But for some reason we are claiming the first exception is caught even though the rethrow is uncaught, suggesting that it is inside something marked as catching in the handler table which the rethrow is not. I don\u0027t know why we are seeing that; you should check the callstack at the time the exception is first thrown and see which call frame is detected as a try/catch, or step through  Isolate::WalkCallStackAndPromiseTree and see where it gets the idea that this is caught.\n\nFor the second part, yes that is what I was talking about although I didn\u0027t realize you were invoking Isolate::Throw from the runtime directly instead of putting an instruction in the bytecode. If you change this call to Rethrow, it shouldn\u0027t pause twice.",
      "parentUuid": "3259ece7_c86bd87b",
      "range": {
        "startLine": 125,
        "startChar": 0,
        "endLine": 125,
        "endChar": 20
      },
      "revId": "3c4ca2000f1b7c10470480d51c03f204fb77c303",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72002e00_a1a8f33a",
        "filename": "test/inspector/debugger/break-on-exception-explicit-resource-management-expected.txt",
        "patchSetId": 19
      },
      "lineNbr": 125,
      "author": {
        "id": 1569532
      },
      "writtenOn": "2024-11-08T18:43:26Z",
      "side": 1,
      "message": "Shu and I have a discussion about break on exception cases and we realized that more than one pause is expected and correct. The way this new feature is implemented is as follow:\n```\ntry {\n  using x \u003d ..;\n  using y \u003d ..;\n} finally {\n  try {\n     dispose y;\n     dispose x;\n  } catch (e) {\n     if e is the first thrown exception, save it for later. Otherwise create a new suppressed error with e and prior existing exception(s) and save it.\n  }\n}\nif there is any saved e:\n   throw e;\n``` \n\nSo, we have an implicit try/catch that is catching every exception thrown during disposal and that is why we have caught exceptions even in uncaught test cases. If the user code has a try/catch, the outer e with be caught otherwise it will be uncaught. So, if one error occurs during disposal without user code try/catch, we will see one caught exception and one uncaught exception (disposalUncaughtUsingSyntax() and disposalUncaughtAwaitUsingSyntax()). The second exception will be caught if user code has a try/catch (disposalCaughtUsingSyntax() and disposalCaughtAwaitUsingSyntax()). If there are more than one exception during disposal without user code try/catch, we will see one caught exception for each thrown exception and the outer e will be one uncaught suppressed error (disposalUncaughtSuppressedError()). If the user code has a try/catch, the suppressed error will be caught as well (disposalCaughtSuppressedError()).\nSo, the expected test result is correct now. Please let us know if you have any questions or concerns.",
      "parentUuid": "ec90b9bd_48db575b",
      "range": {
        "startLine": 125,
        "startChar": 0,
        "endLine": 125,
        "endChar": 20
      },
      "revId": "3c4ca2000f1b7c10470480d51c03f204fb77c303",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c08ad99_3958bf58",
        "filename": "test/inspector/debugger/break-on-exception-explicit-resource-management-expected.txt",
        "patchSetId": 19
      },
      "lineNbr": 125,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2024-11-11T06:08:03Z",
      "side": 1,
      "message": "I don\u0027t agree with your assessment here. What you describe is how it is implemented in the spec and de-sugared, not how developers are experiencing it. The fact that all errors thrown in dispose functions are collected and re-thrown is immaterial, what matters is whether that \"collected error\" is caught/uncaught later on by user code, and that caught/uncaught by the \"collected error\" state should be applied to the individual errors thrown in dispose handlers.\n\nA different way to think about this is the fact that \"catch prediction\" happens at the time of \"throw\". Not when errors are re-thrown/caught. What this means in particular:\n\n* Every error thrown from a dispose function, must at most cause one debugger pause. (For errors not caught by a user try/catch in the dispose function itself).\n* Whether that pause happens on `\u0027caught\u0027` or `\u0027uncaught\u0027` depends on whether \"the collected error\" is caught or uncaught by user code.\n* A corollary of the above is that the \"caught\" or \"uncaught\" determination is the same for all errors thrown in different dispose functions. This follows directly from the fact that caught/uncaught for an individual dispose error is determined by the caught/uncaught for the \"collected error\".\n* The re-throw of the collected error itself never causes a pause. \n* Another corollary is then that the number of pauses is equal to 0 or to the number of throwing dispose functions.\n\nMaybe you could pair with Eric for an hour or two and try to figure this out? The test cases are already excellent so once the test expectations meet the rules above (if technically possible) we should be done :)\n\nApologies for being pedantic here, but it\u0027s easier to fix all this up while there are three people with most/all of the context still paged in :)",
      "parentUuid": "72002e00_a1a8f33a",
      "range": {
        "startLine": 125,
        "startChar": 0,
        "endLine": 125,
        "endChar": 20
      },
      "revId": "3c4ca2000f1b7c10470480d51c03f204fb77c303",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd621878_1aaf494d",
        "filename": "test/inspector/debugger/break-on-exception-explicit-resource-management-expected.txt",
        "patchSetId": 19
      },
      "lineNbr": 125,
      "author": {
        "id": 1369666
      },
      "writtenOn": "2024-11-11T12:51:38Z",
      "side": 1,
      "message": "Just want to add, the point of catch prediction is to take users straight to the source of the unexpected errors they set up no exception handling for without distracting them with lots of other stops all over the code, not to shed light on what is implicitly going on after desugaring. Treating everything as caught because there is a using statement on the callstack substantially reduces the usefulness of the feature. It is worth adding special case logic to the catch prediction code for this feature.",
      "parentUuid": "6c08ad99_3958bf58",
      "range": {
        "startLine": 125,
        "startChar": 0,
        "endLine": 125,
        "endChar": 20
      },
      "revId": "3c4ca2000f1b7c10470480d51c03f204fb77c303",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8cb0c82_87ec2327",
        "filename": "test/inspector/debugger/break-on-exception-explicit-resource-management-expected.txt",
        "patchSetId": 19
      },
      "lineNbr": 125,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-11-11T19:11:59Z",
      "side": 1,
      "message": "Simon and Eric, if a developer types:\n\n```\n{\n  using x \u003d { [Symbol.dispose]() { throw 1; } };\n  using y \u003d { [Symbol.dispose]() { throw 2; } };\n}\n```\n\nWhat the console will print is something like \"uncaught exception: SuppressedError\", with no mention of `1` or `2`. If we pause during `throw 1` and `throw 2` with \"Pause on uncaught exceptions\" checked, would this disconnect not be confusing? Because it\u0027s not possible for the developer to ever see an \"uncaught exception: 1\".",
      "parentUuid": "fd621878_1aaf494d",
      "range": {
        "startLine": 125,
        "startChar": 0,
        "endLine": 125,
        "endChar": 20
      },
      "revId": "3c4ca2000f1b7c10470480d51c03f204fb77c303",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba48d992_e7086c20",
        "filename": "test/inspector/debugger/break-on-exception-explicit-resource-management-expected.txt",
        "patchSetId": 19
      },
      "lineNbr": 125,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-11-11T19:14:21Z",
      "side": 1,
      "message": "Also FWIW when I polled some other TC39 delegates on what they expect the behavior of \"Pause of uncaught exceptions\" to be for these examples, the responses were mixed. One person said \"pause on rethrow only\", while another shared your intuition of \"never pause on rethrows\".",
      "parentUuid": "d8cb0c82_87ec2327",
      "range": {
        "startLine": 125,
        "startChar": 0,
        "endLine": 125,
        "endChar": 20
      },
      "revId": "3c4ca2000f1b7c10470480d51c03f204fb77c303",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f270c08_b91b46ff",
        "filename": "test/inspector/debugger/break-on-exception-explicit-resource-management-expected.txt",
        "patchSetId": 19
      },
      "lineNbr": 125,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-11-11T22:15:45Z",
      "side": 1,
      "message": "Recapping discussion between Rezvan and me, we\u0027re agreed on all the bullet points from Simon. This will involve removing DisposableStack\u0027s internal uses of `v8::TryCatch`.\n\nNote that to implement the behavior of \"the re-throw of the collected error itself never causes a pause\", we can\u0027t actually use `Isolate::ReThrow`, as I think that means we might never create a message object when we need to, and in the case of a collected `SuppressedError`, that\u0027s actually a new error. So, the plan is to implement the following:\n\n- When a block with `using` has exactly one error, and therefore no `SuppressedError` is created, that single error is rethrown with `ReThrow`.\n- When a block with `using` has multiple errors, the newly created `SuppressedError` still has to be thrown using `Throw`. To suppressed the pausing behavior in the debugger, we\u0027ll surround the `Throw` with a `SuppressDebug`.",
      "parentUuid": "ba48d992_e7086c20",
      "range": {
        "startLine": 125,
        "startChar": 0,
        "endLine": 125,
        "endChar": 20
      },
      "revId": "3c4ca2000f1b7c10470480d51c03f204fb77c303",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "abf9f8cd_dc4dd735",
        "filename": "test/inspector/runtime/evaluate-repl-mode-using-await-using.js",
        "patchSetId": 19
      },
      "lineNbr": 11,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-11-01T17:45:32Z",
      "side": 1,
      "message": "It\u0027d be good to make this `throw` to show that the dispose methods are never called in repl mode.",
      "range": {
        "startLine": 11,
        "startChar": 118,
        "endLine": 11,
        "endChar": 128
      },
      "revId": "3c4ca2000f1b7c10470480d51c03f204fb77c303",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e799a27_2c914899",
        "filename": "test/inspector/runtime/evaluate-repl-mode-using-await-using.js",
        "patchSetId": 19
      },
      "lineNbr": 11,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2024-11-04T07:11:26Z",
      "side": 1,
      "message": "can we evaluate `x` and `y` afterwards to make sure that the variable actually got declared?",
      "range": {
        "startLine": 11,
        "startChar": 63,
        "endLine": 11,
        "endChar": 73
      },
      "revId": "3c4ca2000f1b7c10470480d51c03f204fb77c303",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04321fc1_969cd157",
        "filename": "test/inspector/runtime/evaluate-repl-mode-using-await-using.js",
        "patchSetId": 19
      },
      "lineNbr": 11,
      "author": {
        "id": 1569532
      },
      "writtenOn": "2024-11-05T12:14:08Z",
      "side": 1,
      "message": "That\u0027s a good idea. Done",
      "parentUuid": "abf9f8cd_dc4dd735",
      "range": {
        "startLine": 11,
        "startChar": 118,
        "endLine": 11,
        "endChar": 128
      },
      "revId": "3c4ca2000f1b7c10470480d51c03f204fb77c303",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80440165_5ced45f2",
        "filename": "test/inspector/runtime/evaluate-repl-mode-using-await-using.js",
        "patchSetId": 19
      },
      "lineNbr": 11,
      "author": {
        "id": 1569532
      },
      "writtenOn": "2024-11-05T12:14:08Z",
      "side": 1,
      "message": "Done. However, the expected result is showing Object/object. When I test it in the console, evaluating `x` results in `{value: 1, Symbol(Symbol.dispose): ƒ}`.",
      "parentUuid": "4e799a27_2c914899",
      "range": {
        "startLine": 11,
        "startChar": 63,
        "endLine": 11,
        "endChar": 73
      },
      "revId": "3c4ca2000f1b7c10470480d51c03f204fb77c303",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}